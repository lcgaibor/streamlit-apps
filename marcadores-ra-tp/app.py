import streamlit as st
import numpy as np
import cv2
from PIL import Image, ImageDraw, ImageFont
import io
import base64
from datetime import datetime
from styles import apply_styles

# Configuraci칩n de la p치gina
st.set_page_config(
    page_title="Generador de Marcadores RA - Tabla Peri칩dica",
    page_icon="游빍",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Aplicar estilos personalizados
apply_styles()


class ElementARMarkerGenerator:
    def __init__(self):
        """
        Inicializa el generador de marcadores RA para elementos qu칤micos.
        """
        self.marker_size = 400  # Tama침o del marcador en p칤xeles
        self.border_size = 40   # Tama침o del borde en p칤xeles
        
        # Elementos de la tabla peri칩dica (s칤mbolo, nombre, n칰mero at칩mico)
        self.elements = [
            ("H", "Hidr칩geno", 1), ("He", "Helio", 2), ("Li", "Litio", 3), 
            ("Be", "Berilio", 4), ("B", "Boro", 5), ("C", "Carbono", 6),
            ("N", "Nitr칩geno", 7), ("O", "Ox칤geno", 8), ("F", "Fl칰or", 9),
            ("Ne", "Ne칩n", 10), ("Na", "Sodio", 11), ("Mg", "Magnesio", 12),
            ("Al", "Aluminio", 13), ("Si", "Silicio", 14), ("P", "F칩sforo", 15),
            ("S", "Azufre", 16), ("Cl", "Cloro", 17), ("Ar", "Arg칩n", 18),
            ("K", "Potasio", 19), ("Ca", "Calcio", 20), ("Sc", "Escandio", 21),
            ("Ti", "Titanio", 22), ("V", "Vanadio", 23), ("Cr", "Cromo", 24),
            ("Mn", "Manganeso", 25), ("Fe", "Hierro", 26), ("Co", "Cobalto", 27),
            ("Ni", "N칤quel", 28), ("Cu", "Cobre", 29), ("Zn", "Zinc", 30),
            ("Ga", "Galio", 31), ("Ge", "Germanio", 32), ("As", "Ars칠nico", 33),
            ("Se", "Selenio", 34), ("Br", "Bromo", 35), ("Kr", "Kript칩n", 36),
            ("Rb", "Rubidio", 37), ("Sr", "Estroncio", 38), ("Y", "Itrio", 39),
            ("Zr", "Zirconio", 40), ("Nb", "Niobio", 41), ("Mo", "Molibdeno", 42),
            ("Tc", "Tecnecio", 43), ("Ru", "Rutenio", 44), ("Rh", "Rodio", 45),
            ("Pd", "Paladio", 46), ("Ag", "Plata", 47), ("Cd", "Cadmio", 48),
            ("In", "Indio", 49), ("Sn", "Esta침o", 50), ("Sb", "Antimonio", 51),
            ("Te", "Telurio", 52), ("I", "Yodo", 53), ("Xe", "Xen칩n", 54),
            ("Cs", "Cesio", 55), ("Ba", "Bario", 56), ("La", "Lantano", 57),
            ("Ce", "Cerio", 58), ("Pr", "Praseodimio", 59), ("Nd", "Neodimio", 60),
            ("Pm", "Prometio", 61), ("Sm", "Samario", 62), ("Eu", "Europio", 63),
            ("Gd", "Gadolinio", 64), ("Tb", "Terbio", 65), ("Dy", "Disprosio", 66),
            ("Ho", "Holmio", 67), ("Er", "Erbio", 68), ("Tm", "Tulio", 69),
            ("Yb", "Iterbio", 70), ("Lu", "Lutecio", 71), ("Hf", "Hafnio", 72),
            ("Ta", "T치ntalo", 73), ("W", "Wolframio", 74), ("Re", "Renio", 75),
            ("Os", "Osmio", 76), ("Ir", "Iridio", 77), ("Pt", "Platino", 78),
            ("Au", "Oro", 79), ("Hg", "Mercurio", 80), ("Tl", "Talio", 81),
            ("Pb", "Plomo", 82), ("Bi", "Bismuto", 83), ("Po", "Polonio", 84),
            ("At", "Astato", 85), ("Rn", "Rad칩n", 86), ("Fr", "Francio", 87),
            ("Ra", "Radio", 88), ("Ac", "Actinio", 89), ("Th", "Torio", 90),
            ("Pa", "Protactinio", 91), ("U", "Uranio", 92), ("Np", "Neptunio", 93),
            ("Pu", "Plutonio", 94), ("Am", "Americio", 95), ("Cm", "Curio", 96),
            ("Bk", "Berkelio", 97), ("Cf", "Californio", 98), ("Es", "Einstenio", 99),
            ("Fm", "Fermio", 100), ("Md", "Mendelevio", 101), ("No", "Nobelio", 102),
            ("Lr", "Lawrencio", 103), ("Rf", "Rutherfordio", 104), ("Db", "Dubnio", 105),
            ("Sg", "Seaborgio", 106), ("Bh", "Bohrio", 107), ("Hs", "Hasio", 108),
            ("Mt", "Meitnerio", 109), ("Ds", "Darmstadtio", 110), ("Rg", "Roentgenio", 111),
            ("Cn", "Copernicio", 112), ("Nh", "Nihonio", 113), ("Fl", "Flerovio", 114),
            ("Mc", "Moscovio", 115), ("Lv", "Livermorio", 116), ("Ts", "Teneso", 117),
            ("Og", "Oganes칩n", 118)
        ]
    
    def generate_hydrogen_qr_marker(self, show_symbol=False, show_atomic_number=True):
        """
        Genera un marcador especial tipo QR para el hidr칩geno (elemento 1).
        
        Args:
            show_symbol (bool): Indica si se debe mostrar el s칤mbolo del elemento.
            show_atomic_number (bool): Indica si se debe mostrar el n칰mero at칩mico.
            
        Returns:
            np.array: Imagen del marcador como array de NumPy.
        """
        img_size = self.marker_size + 2 * self.border_size
        img = Image.new('RGB', (img_size, img_size), color='white')
        draw = ImageDraw.Draw(img)
        
        # Usar una semilla espec칤fica para el hidr칩geno
        np.random.seed(1001)  # Semilla especial para hidr칩geno
        
        # Crear un patr칩n tipo QR m치s denso
        grid_size = 16  # M치s celdas para patr칩n m치s complejo
        cell_size = self.marker_size // grid_size
        
        # Definir patrones especiales para las esquinas (como QR codes)
        corner_pattern = [
            [1, 1, 1, 1, 1, 1, 1],
            [1, 0, 0, 0, 0, 0, 1],
            [1, 0, 1, 1, 1, 0, 1],
            [1, 0, 1, 1, 1, 0, 1],
            [1, 0, 1, 1, 1, 0, 1],
            [1, 0, 0, 0, 0, 0, 1],
            [1, 1, 1, 1, 1, 1, 1]
        ]
        
        # Dibujar patrones de esquina (como QR)
        corner_positions = [(0, 0), (grid_size-7, 0), (0, grid_size-7)]
        
        for corner_x, corner_y in corner_positions:
            for i in range(7):
                for j in range(7):
                    if corner_pattern[i][j] == 1:
                        x0 = self.border_size + (corner_x + i) * cell_size
                        y0 = self.border_size + (corner_y + j) * cell_size
                        x1 = x0 + cell_size
                        y1 = y0 + cell_size
                        draw.rectangle([(x0, y0), (x1, y1)], fill='black')
        
        # A침adir patr칩n de alineaci칩n en el centro (espec칤fico del hidr칩geno)
        center_x, center_y = grid_size // 2 - 2, grid_size // 2 - 2
        alignment_pattern = [
            [1, 1, 1, 1, 1],
            [1, 0, 0, 0, 1],
            [1, 0, 1, 0, 1],
            [1, 0, 0, 0, 1],
            [1, 1, 1, 1, 1]
        ]
        
        for i in range(5):
            for j in range(5):
                if alignment_pattern[i][j] == 1:
                    x0 = self.border_size + (center_x + i) * cell_size
                    y0 = self.border_size + (center_y + j) * cell_size
                    x1 = x0 + cell_size
                    y1 = y0 + cell_size
                    draw.rectangle([(x0, y0), (x1, y1)], fill='black')
        
        # Rellenar el resto con patr칩n pseudo-aleatorio
        for i in range(grid_size):
            for j in range(grid_size):
                # Evitar las esquinas y el centro ya dibujados
                if ((i < 7 and j < 7) or  # Esquina superior izquierda
                    (i >= grid_size-7 and j < 7) or  # Esquina superior derecha
                    (i < 7 and j >= grid_size-7) or  # Esquina inferior izquierda
                    (center_x <= i < center_x+5 and center_y <= j < center_y+5)):  # Centro
                    continue
                
                # Reservar espacio para s칤mbolo y n칰mero at칩mico si est치n habilitados
                if show_symbol and i < 4 and j >= grid_size-4:
                    continue
                if show_atomic_number and i >= grid_size-3 and j >= grid_size-3:
                    continue
                
                # Generar patr칩n determinista espec칤fico para hidr칩geno
                seed_val = (i * 31 + j * 17 + 1001) % 100
                if seed_val < 45:  # 45% de probabilidad
                    x0 = self.border_size + i * cell_size
                    y0 = self.border_size + j * cell_size
                    x1 = x0 + cell_size
                    y1 = y0 + cell_size
                    draw.rectangle([(x0, y0), (x1, y1)], fill='black')
        
        # A침adir el s칤mbolo H si est치 habilitado
        if show_symbol:
            try:
                font_path = "font/OpenSans-Bold.ttf"
                font_size = 60
                font_symbol = ImageFont.truetype(font_path, font_size)
            except IOError:
                try:
                    font_path = "/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf"
                    font_symbol = ImageFont.truetype(font_path, font_size)
                except IOError:
                    font_symbol = ImageFont.load_default()
            
            # 츼rea para el s칤mbolo (4x4 celdas en la esquina inferior izquierda)
            symbol_area_x0 = self.border_size
            symbol_area_y0 = self.border_size + (grid_size - 4) * cell_size
            symbol_area_x1 = symbol_area_x0 + cell_size * 4
            symbol_area_y1 = symbol_area_y0 + cell_size * 4
            
            # Fondo blanco para el s칤mbolo
            draw.rectangle(
                [(symbol_area_x0, symbol_area_y0), (symbol_area_x1, symbol_area_y1)],
                fill='white'
            )
            
            # Centrar el texto
            symbol_width = draw.textlength("H", font=font_symbol)
            text_x = symbol_area_x0 + (4*cell_size - symbol_width) / 2
            text_y = symbol_area_y0 + (4*cell_size - font_size) / 2
            
            # Dibujar el s칤mbolo H
            for offset_x in range(-1, 1):
                for offset_y in range(-1, 1):
                    draw.text(
                        (text_x + offset_x, text_y + offset_y),
                        "H",
                        fill='black',
                        font=font_symbol
                    )
        
        # A침adir el n칰mero at칩mico si est치 habilitado
        if show_atomic_number:
            try:
                font_path = "font/OpenSans-Bold.ttf"
                font_size = 50
                font_info = ImageFont.truetype(font_path, font_size)
            except IOError:
                try:
                    font_path = "/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf"
                    font_info = ImageFont.truetype(font_path, font_size)
                except IOError:
                    font_info = ImageFont.load_default()
            
            # 츼rea para el n칰mero at칩mico (3x3 celdas en la esquina inferior derecha)
            atomic_area_x0 = self.border_size + (grid_size - 3) * cell_size
            atomic_area_y0 = self.border_size + (grid_size - 3) * cell_size
            atomic_area_x1 = atomic_area_x0 + cell_size * 3
            atomic_area_y1 = atomic_area_y0 + cell_size * 3
            
            # Fondo blanco para el n칰mero
            draw.rectangle(
                [(atomic_area_x0, atomic_area_y0), (atomic_area_x1, atomic_area_y1)],
                fill='white'
            )
            
            # Centrar el texto
            text_width = draw.textlength("1", font=font_info)
            text_x = atomic_area_x0 + (3*cell_size - text_width) / 2
            text_y = atomic_area_y0 + (3*cell_size - font_size) / 2
            
            # Dibujar el n칰mero 1
            for offset_x in range(-1, 1):
                for offset_y in range(-1, 1):
                    draw.text(
                        (text_x + offset_x, text_y + offset_y),
                        "1",
                        fill='black',
                        font=font_info
                    )
        
        marker_array = np.array(img)
        marker_gray = cv2.cvtColor(marker_array, cv2.COLOR_RGB2GRAY)
        
        return marker_gray
    
    def generate_element_marker(self, symbol, name, atomic_number, show_symbol=False, show_atomic_number=True, symbol_size=2):
        """
        Genera un marcador RA 칰nico para un elemento qu칤mico optimizado para impresi칩n 3D.
        Si es hidr칩geno (atomic_number = 1), genera un marcador especial tipo QR.
        
        Args:
            symbol (str): S칤mbolo del elemento.
            name (str): Nombre del elemento.
            atomic_number (int): N칰mero at칩mico del elemento.
            show_symbol (bool): Indica si se debe mostrar el s칤mbolo del elemento.
            show_atomic_number (bool): Indica si se debe mostrar el n칰mero at칩mico.
            symbol_size (int): Tama침o del s칤mbolo en celdas (2, 3, o 4).
            
        Returns:
            np.array: Imagen del marcador como array de NumPy.
        """
        # Caso especial para el hidr칩geno
        if atomic_number == 1:
            return self.generate_hydrogen_qr_marker(show_symbol, show_atomic_number)
        
        # C칩digo original para todos los dem치s elementos
        img_size = self.marker_size + 2 * self.border_size
        img = Image.new('RGB', (img_size, img_size), color='white')
        draw = ImageDraw.Draw(img)
        
        np.random.seed(atomic_number)  # Usar n칰mero at칩mico como semilla
        
        # Generar una matriz de celdas para el marcador
        grid_size = 8  
        cell_size = (self.marker_size) // grid_size
        
        for i in range(grid_size):
            for j in range(grid_size):
                # Evitar dibujar en las 치reas reservadas para el s칤mbolo y n칰mero at칩mico
                if show_symbol and i < symbol_size and j < symbol_size:
                    continue
                    
                if show_atomic_number and i >= grid_size - 2 and j >= grid_size - 2:
                    continue
                
                # Generar un valor aleatorio determinista basado en el n칰mero at칩mico
                rand_val = np.random.random()
                if rand_val > 0.5:  # 50% de probabilidad de dibujar 
                    x0 = self.border_size + i * cell_size
                    y0 = self.border_size + j * cell_size
                    x1 = x0 + cell_size
                    y1 = y0 + cell_size
                    
                    draw.rectangle([(x0, y0), (x1, y1)], fill='black')
        
        if show_symbol:
            try:
                font_path = "font/OpenSans-Bold.ttf"
                if symbol_size == 2:
                    font_size = 80
                elif symbol_size == 3:
                    font_size = 110
                else:  # symbol_size == 4
                    font_size = 140
                    
                font_symbol = ImageFont.truetype(font_path, font_size)
            except IOError:
                try:
                    font_path = "/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf"
                    font_symbol = ImageFont.truetype(font_path, font_size)
                except IOError:
                    font_symbol = ImageFont.load_default()
            
            symbol_area_x0 = self.border_size
            symbol_area_y0 = self.border_size
            symbol_area_x1 = symbol_area_x0 + cell_size * symbol_size
            symbol_area_y1 = symbol_area_y0 + cell_size * symbol_size
            
            draw.rectangle(
                [(symbol_area_x0, symbol_area_y0), (symbol_area_x1, symbol_area_y1)],
                fill='white'
            )
            
            symbol_width = draw.textlength(symbol, font=font_symbol)
            text_x = symbol_area_x0 + (symbol_size*cell_size - symbol_width) / 2
            text_y = symbol_area_y0 + (symbol_size*cell_size - font_size) / 2
            
            if symbol_width > (symbol_size*cell_size - 10):
                scaling_factor = (symbol_size*cell_size - 10) / symbol_width
                new_font_size = int(font_size * scaling_factor)
                try:
                    font_symbol = ImageFont.truetype(font_path, new_font_size)
                except IOError:
                    font_symbol = ImageFont.load_default()
                
                symbol_width = draw.textlength(symbol, font=font_symbol)
                text_x = symbol_area_x0 + (symbol_size*cell_size - symbol_width) / 2
                text_y = symbol_area_y0 + (symbol_size*cell_size - new_font_size) / 2
            
            for offset_x in range(-1, 1):
                for offset_y in range(-1, 1):
                    draw.text(
                        (text_x + offset_x, text_y + offset_y),
                        symbol,
                        fill='black',
                        font=font_symbol
                    )
        
        if show_atomic_number:
            atomic_area_x0 = self.border_size + (grid_size - 2) * cell_size
            atomic_area_y0 = self.border_size + (grid_size - 2) * cell_size
            atomic_area_x1 = atomic_area_x0 + cell_size * 2
            atomic_area_y1 = atomic_area_y0 + cell_size * 2
            
            draw.rectangle(
                [(atomic_area_x0, atomic_area_y0), (atomic_area_x1, atomic_area_y1)],
                fill='white'
            )
            
            atomic_text = str(atomic_number)
            try:
                font_path = "font/OpenSans-Bold.ttf"
                font_size = 80 if len(atomic_text) <= 2 else 65
                font_info = ImageFont.truetype(font_path, font_size)
            except IOError:
                try:
                    font_path = "/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf"
                    font_info = ImageFont.truetype(font_path, font_size)
                except IOError:
                    font_info = ImageFont.load_default()
            
            text_width = draw.textlength(atomic_text, font=font_info)
            text_x = atomic_area_x0 + (2*cell_size - text_width) / 2
            text_y = atomic_area_y0 + (2*cell_size - font_size) / 2
            
            if text_width > (2*cell_size - 10):
                scaling_factor = (2*cell_size - 10) / text_width
                new_font_size = int(font_size * scaling_factor)
                try:
                    font_info = ImageFont.truetype(font_path, new_font_size)
                except IOError:
                    font_info = ImageFont.load_default()
                
                text_width = draw.textlength(atomic_text, font=font_info)
                text_x = atomic_area_x0 + (2*cell_size - text_width) / 2
                text_y = atomic_area_y0 + (2*cell_size - new_font_size) / 2
            
            for offset_x in range(-1, 1):
                for offset_y in range(-1, 1):
                    draw.text(
                        (text_x + offset_x, text_y + offset_y),
                        atomic_text,
                        fill='black',
                        font=font_info
                    )
        
        marker_array = np.array(img)
        marker_gray = cv2.cvtColor(marker_array, cv2.COLOR_RGB2GRAY)
        
        return marker_gray

    def get_element_by_atomic_number(self, atomic_number):
        """Obtiene un elemento por su n칰mero at칩mico."""
        for element in self.elements:
            if element[2] == atomic_number:
                return element
        return None

def get_image_download_link(img, filename, text):
    """Genera un enlace para descargar una imagen."""
    buffered = io.BytesIO()
    img.save(buffered, format="PNG")
    img_str = base64.b64encode(buffered.getvalue()).decode()
    href = f'<a href="data:file/png;base64,{img_str}" download="{filename}">{text}</a>'
    return href

def main():
    st.title("游빍 Generador de Marcadores RA para la Tabla Peri칩dica")
    
    st.markdown("""
    Esta aplicaci칩n genera marcadores de Realidad Aumentada (RA) 칰nicos para cada elemento 
    de la tabla peri칩dica. Cada marcador se genera utilizando el n칰mero at칩mico del elemento 
    como semilla, lo que garantiza un patr칩n 칰nico y reconocible, optimizado para Vuforia y 
    para impresi칩n 3D.
    
    El Hidr칩geno (H-1) tiene un marcador 칰nico tipo QR diferente a todos los dem치s elementos.
    """)

    generator = ElementARMarkerGenerator()
    
    st.sidebar.header("Opciones de Configuraci칩n")
    
    # Selector de elemento
    st.sidebar.subheader("Selecciona un Elemento")
    
    # Nueva clasificaci칩n de elementos por categor칤as
    element_categories = {
        " Metales Alcalinos (6 elementos)": [3, 11, 19, 37, 55, 87],
        " Metales Alcalinot칠rreos (6 elementos)": [4, 12, 20, 38, 56, 88],
        " Metales de Transici칩n (34 elementos)": [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 72, 73, 74, 75, 76, 77, 78, 79, 80, 104, 105, 106, 107, 108],
        " Metales Post-Transici칩n (12 elementos)": [13, 31, 49, 50, 81, 82, 83, 84, 113, 114, 115, 116],
        " Metaloides (7 elementos)": [5, 14, 32, 33, 51, 52, 85],
        " No Metales Reactivos (9 elementos)": [1, 6, 7, 8, 9, 15, 16, 17, 34],
        " Gases Nobles (6 elementos)": [2, 10, 18, 36, 54, 86],
        " Lant치nidos (15 elementos)": list(range(57, 72)),
        " Act칤nidos (15 elementos)": list(range(89, 104)),
        " Propiedades Qu칤micas Desconocidas (4 elementos)": [112, 113, 114, 118]
    }
    
    category_select = st.sidebar.selectbox(
        "Categor칤a de elementos",
        options=list(element_categories.keys()),
        index=0
    )
    
    category_elements = element_categories[category_select]
    
    element_options = []
    for atomic_num in category_elements:
        element = generator.get_element_by_atomic_number(atomic_num)
        if element:
            symbol, name, _ = element
            special_marker = "  [ESPECIAL]" if atomic_num == 1 else ""
            element_options.append(f"{atomic_num}: {name} ({symbol}){special_marker}")
    
    selected_element_str = st.sidebar.selectbox(
        "Elemento",
        options=element_options,
        index=0 if element_options else None
    )
    
    st.sidebar.subheader("O ingresa un n칰mero at칩mico")
    atomic_number_input = st.sidebar.number_input(
        "N칰mero at칩mico (1-118)",
        min_value=1,
        max_value=118,
        value=1
    )
    
    st.sidebar.subheader("Opciones de Visualizaci칩n")
    show_symbol = st.sidebar.checkbox("Mostrar s칤mbolo del elemento", value=True)
    show_atomic_number = st.sidebar.checkbox("Mostrar n칰mero at칩mico", value=True)
    
    # Selector de tama침o del s칤mbolo (solo para elementos que no sean hidr칩geno)
    st.sidebar.subheader("Tama침o del S칤mbolo")
    symbol_size = st.sidebar.selectbox(
        "Tama침o del s칤mbolo (en celdas)",
        options=[2, 3, 4],
        index=0,
        help="Selecciona el tama침o del 치rea para el s칤mbolo: 2x2, 3x3, o 4x4 celdas (No aplica para Hidr칩geno)"
    )
    
    # Bot칩n para generar
    generate_button = st.sidebar.button("Generar Marcador")
    
    if generate_button:
        if selected_element_str and ":" in selected_element_str:
            selected_atomic_number = int(selected_element_str.split(':')[0])
        else:
            selected_atomic_number = atomic_number_input
    else:
        selected_atomic_number = atomic_number_input
    
    selected_element = generator.get_element_by_atomic_number(selected_atomic_number)
    
    if selected_element:
        symbol, name, atomic_number = selected_element
        
        col1, col2 = st.columns([2, 1])
        
        with col1:
            st.subheader("Marcador RA generado")
            
            marker = generator.generate_element_marker(
                symbol, 
                name, 
                atomic_number, 
                show_symbol=show_symbol,
                show_atomic_number=show_atomic_number,
                symbol_size=symbol_size
            )
            
            pil_img = Image.fromarray(marker)
            
            # Mensaje especial para hidr칩geno
            if atomic_number == 1:
                caption_text = f" Marcador RA ESPECIAL tipo QR para {name} (H)"
            else:
                caption_text = f"Marcador RA para {name} (S칤mbolo {symbol_size}x{symbol_size})"
            
            st.image(pil_img, caption=caption_text, use_container_width=True)
            
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            if atomic_number == 1:
                filename = f"{atomic_number:03d}_{symbol}_QR_ESPECIAL_{timestamp}.png"
            else:
                filename = f"{atomic_number:03d}_{symbol}_{symbol_size}x{symbol_size}_{timestamp}.png"
            st.markdown(get_image_download_link(pil_img, filename, "游닌 Descargar Marcador"), unsafe_allow_html=True)
        
        with col2:
            st.subheader("Informaci칩n del Elemento")
            
            # Informaci칩n especial para hidr칩geno
            if atomic_number == 1:
                st.markdown(f"""
                <div class="element-info">
                    <h3 style="text-align: center; color: red;"> {symbol} - ESPECIAL</h3>
                    <h2 style="text-align: center; color: black;">{name}</h2>
                    <p style="text-align: center; color: black;"><strong>N칰mero at칩mico:</strong> {atomic_number}</p>
                    <p style="text-align: center; color: red;"><strong>Tipo:</strong> Marcador QR 칰nico</p>
                </div>
                """, unsafe_allow_html=True)
            else:
                st.markdown(f"""
                <div class="element-info">
                    <h3 style="text-align: center; color: black;">{symbol}</h3>
                    <h2 style="text-align: center; color: black;">{name}</h2>
                    <p style="text-align: center; color: black;"><strong>N칰mero at칩mico:</strong> {atomic_number}</p>
                    <p style="text-align: center; color: black;"><strong>Tama침o s칤mbolo:</strong> {symbol_size}x{symbol_size}</p>
                </div>
                """, unsafe_allow_html=True)
            
            # Caracter칤sticas espec칤ficas seg칰n el elemento
            if atomic_number == 1:
                st.markdown("""
                ### Caracter칤sticas del marcador ESPECIAL (Hidr칩geno)
                
                *  **Marcador 칰nico tipo QR** solo para hidr칩geno
                * **Patrones de esquina** similares a c칩digos QR
                * **Patr칩n de alineaci칩n central** para mejor detecci칩n
                * **Grid de 16x16** para mayor densidad
                """)
            else:
                st.markdown("""
                ### Caracter칤sticas del marcador
                
                * Se utiliza el algoritmo Mersenne Twister.
                * Patr칩n de cuadrados para una detecci칩n m치s efectiva
                * Este m칠todo garantiza que se generar치 exactamente el mismo patr칩n.
                * El algoritmo aplica transformaciones matem치ticas, desplazamientos de bits y XOR.
                * Patr칩n 칰nico generado usando el n칰mero at칩mico
                * Tama침o de s칤mbolo configurable (2x2, 3x3, 4x4)
                """)
        
        # Instrucciones de uso
        st.markdown("""
        ### C칩mo usar el marcador
        
        1. Descarga la imagen del marcador
        2. Para uso en AR (Vuforia): Imprime la imagen en papel o mu칠strala en pantalla
        3. Para impresi칩n 3D: Importa el archivo a TinkerCAD para a침adir relieve
        4. En la impresi칩n 3D, las 치reas negras ser치n las que tengan relieve
        5. **춰ESPECIAL!** El Hidr칩geno tiene un marcador tipo QR 칰nico para f치cil identificaci칩n
        """)
        
        if atomic_number == 1:
            st.markdown("""
            ### 游댠 Informaci칩n adicional sobre el marcador del Hidr칩geno
        
            
            - **Patrones de esquina QR**: Tres patrones de 7x7 en las esquinas para orientaci칩n
            - **Patr칩n central**: Un patr칩n de alineaci칩n de 5x5 en el centro
            - **Mayor densidad**: Grid de 16x16 vs 8x8 de los dem치s elementos
            - **Reconocimiento 칰nico**: F치cilmente distinguible de cualquier otro marcador
            """)
    
    # Pie de p치gina
    st.sidebar.markdown("---")
    st.sidebar.markdown("### Repositorio")
    st.sidebar.markdown("""
    GitHub: [lcgaibor's apps](https://github.com/lcgaibor/streamlit-apps)
    """)

if __name__ == "__main__":
    main()
