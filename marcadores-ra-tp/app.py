import streamlit as st
import numpy as np
import cv2
from PIL import Image, ImageDraw, ImageFont
import io
import base64
from datetime import datetime
from styles import apply_styles

# Configuraci칩n de la p치gina
st.set_page_config(
    page_title="Generador de Marcadores RA - Tabla Peri칩dica",
    page_icon="游빍",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Aplicar estilos personalizados
apply_styles()


class ElementARMarkerGenerator:
    def __init__(self):
        """
        Inicializa el generador de marcadores RA para elementos qu칤micos.
        """
        self.marker_size = 400  # Tama침o del marcador en p칤xeles
        self.border_size = 40   # Tama침o del borde en p칤xeles
        
        # Elementos de la tabla peri칩dica (s칤mbolo, nombre, n칰mero at칩mico)
        self.elements = [
            ("H", "Hidr칩geno", 1), ("He", "Helio", 2), ("Li", "Litio", 3), 
            ("Be", "Berilio", 4), ("B", "Boro", 5), ("C", "Carbono", 6),
            ("N", "Nitr칩geno", 7), ("O", "Ox칤geno", 8), ("F", "Fl칰or", 9),
            ("Ne", "Ne칩n", 10), ("Na", "Sodio", 11), ("Mg", "Magnesio", 12),
            ("Al", "Aluminio", 13), ("Si", "Silicio", 14), ("P", "F칩sforo", 15),
            ("S", "Azufre", 16), ("Cl", "Cloro", 17), ("Ar", "Arg칩n", 18),
            ("K", "Potasio", 19), ("Ca", "Calcio", 20), ("Sc", "Escandio", 21),
            ("Ti", "Titanio", 22), ("V", "Vanadio", 23), ("Cr", "Cromo", 24),
            ("Mn", "Manganeso", 25), ("Fe", "Hierro", 26), ("Co", "Cobalto", 27),
            ("Ni", "N칤quel", 28), ("Cu", "Cobre", 29), ("Zn", "Zinc", 30),
            ("Ga", "Galio", 31), ("Ge", "Germanio", 32), ("As", "Ars칠nico", 33),
            ("Se", "Selenio", 34), ("Br", "Bromo", 35), ("Kr", "Kript칩n", 36),
            ("Rb", "Rubidio", 37), ("Sr", "Estroncio", 38), ("Y", "Itrio", 39),
            ("Zr", "Zirconio", 40), ("Nb", "Niobio", 41), ("Mo", "Molibdeno", 42),
            ("Tc", "Tecnecio", 43), ("Ru", "Rutenio", 44), ("Rh", "Rodio", 45),
            ("Pd", "Paladio", 46), ("Ag", "Plata", 47), ("Cd", "Cadmio", 48),
            ("In", "Indio", 49), ("Sn", "Esta침o", 50), ("Sb", "Antimonio", 51),
            ("Te", "Telurio", 52), ("I", "Yodo", 53), ("Xe", "Xen칩n", 54),
            ("Cs", "Cesio", 55), ("Ba", "Bario", 56), ("La", "Lantano", 57),
            ("Ce", "Cerio", 58), ("Pr", "Praseodimio", 59), ("Nd", "Neodimio", 60),
            ("Pm", "Prometio", 61), ("Sm", "Samario", 62), ("Eu", "Europio", 63),
            ("Gd", "Gadolinio", 64), ("Tb", "Terbio", 65), ("Dy", "Disprosio", 66),
            ("Ho", "Holmio", 67), ("Er", "Erbio", 68), ("Tm", "Tulio", 69),
            ("Yb", "Iterbio", 70), ("Lu", "Lutecio", 71), ("Hf", "Hafnio", 72),
            ("Ta", "T치ntalo", 73), ("W", "Wolframio", 74), ("Re", "Renio", 75),
            ("Os", "Osmio", 76), ("Ir", "Iridio", 77), ("Pt", "Platino", 78),
            ("Au", "Oro", 79), ("Hg", "Mercurio", 80), ("Tl", "Talio", 81),
            ("Pb", "Plomo", 82), ("Bi", "Bismuto", 83), ("Po", "Polonio", 84),
            ("At", "Astato", 85), ("Rn", "Rad칩n", 86), ("Fr", "Francio", 87),
            ("Ra", "Radio", 88), ("Ac", "Actinio", 89), ("Th", "Torio", 90),
            ("Pa", "Protactinio", 91), ("U", "Uranio", 92), ("Np", "Neptunio", 93),
            ("Pu", "Plutonio", 94), ("Am", "Americio", 95), ("Cm", "Curio", 96),
            ("Bk", "Berkelio", 97), ("Cf", "Californio", 98), ("Es", "Einstenio", 99),
            ("Fm", "Fermio", 100), ("Md", "Mendelevio", 101), ("No", "Nobelio", 102),
            ("Lr", "Lawrencio", 103), ("Rf", "Rutherfordio", 104), ("Db", "Dubnio", 105),
            ("Sg", "Seaborgio", 106), ("Bh", "Bohrio", 107), ("Hs", "Hasio", 108),
            ("Mt", "Meitnerio", 109), ("Ds", "Darmstadtio", 110), ("Rg", "Roentgenio", 111),
            ("Cn", "Copernicio", 112), ("Nh", "Nihonio", 113), ("Fl", "Flerovio", 114),
            ("Mc", "Moscovio", 115), ("Lv", "Livermorio", 116), ("Ts", "Teneso", 117),
            ("Og", "Oganes칩n", 118)
        ]
    
    def generate_element_marker(self, symbol, name, atomic_number, show_symbol=False, show_atomic_number=True):
        """
        Genera un marcador RA 칰nico para un elemento qu칤mico optimizado para impresi칩n 3D.
        
        Args:
            symbol (str): S칤mbolo del elemento.
            name (str): Nombre del elemento.
            atomic_number (int): N칰mero at칩mico del elemento.
            show_symbol (bool): Indica si se debe mostrar el s칤mbolo del elemento.
            show_atomic_number (bool): Indica si se debe mostrar el n칰mero at칩mico.
            
        Returns:
            np.array: Imagen del marcador como array de NumPy.
        """
        img_size = self.marker_size + 2 * self.border_size
        img = Image.new('RGB', (img_size, img_size), color='white')
        draw = ImageDraw.Draw(img)
        
        # Se ha eliminado el borde negro exterior del marcador
        
        np.random.seed(atomic_number)  # Usar n칰mero at칩mico como semilla
        
        # Generar una matriz de celdas para el marcador
        grid_size = 8  
        cell_size = (self.marker_size) // grid_size
        
        for i in range(grid_size):
            for j in range(grid_size):
                # Evitar dibujar en las 치reas reservadas para el s칤mbolo y n칰mero at칩mico
                # Reservar 2x2 celdas en la esquina superior izquierda para el s칤mbolo
                if show_symbol and i < 2 and j < 2:
                    continue
                    
                # Reservar 2x2 celdas en la esquina inferior derecha para el n칰mero at칩mico
                if show_atomic_number and i >= grid_size - 2 and j >= grid_size - 2:
                    continue
                
                # Generar un valor aleatorio determinista basado en el n칰mero at칩mico
                rand_val = np.random.random()
                if rand_val > 0.5:  # 50% de probabilidad de dibujar 
                    x0 = self.border_size + i * cell_size
                    y0 = self.border_size + j * cell_size
                    x1 = x0 + cell_size
                    y1 = y0 + cell_size
                    
                    # Solo dibujar cuadrados (100%)
                    draw.rectangle([(x0, y0), (x1, y1)], fill='black')
        
        if show_symbol:
            try:
                # Fuente para el s칤mbolo - usar OpenSans-Bold.ttf
                font_path = "font/OpenSans-Bold.ttf"
                font_size = 80  # Ajustado para que entre mejor en las celdas 2x2
                font_symbol = ImageFont.truetype(font_path, font_size)
            except IOError:
                try:
                    # Intentar con la ruta alternativa si la primera falla
                    font_path = "/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf"
                    font_symbol = ImageFont.truetype(font_path, font_size)
                except IOError:
                    font_symbol = ImageFont.load_default()
            
            # Usar un 치rea de 2x2 celdas para el s칤mbolo en la esquina superior izquierda
            symbol_area_x0 = self.border_size
            symbol_area_y0 = self.border_size
            symbol_area_x1 = symbol_area_x0 + cell_size * 2
            symbol_area_y1 = symbol_area_y0 + cell_size * 2
            
            # Dibujar un fondo blanco para el s칤mbolo sin borde negro
            draw.rectangle(
                [(symbol_area_x0, symbol_area_y0), (symbol_area_x1, symbol_area_y1)],
                fill='white'
            )
            
            # Calcular posici칩n centrada para el texto
            symbol_width = draw.textlength(symbol, font=font_symbol)
            text_x = symbol_area_x0 + (2*cell_size - symbol_width) / 2
            text_y = symbol_area_y0 + (2*cell_size - font_size) / 2
            
            # Asegurar que el texto est치 completamente contenido dentro del 치rea 2x2
            # Ajustar tama침o si es necesario
            if symbol_width > (2*cell_size - 10):
                # Reducir el tama침o de la fuente si es necesario
                scaling_factor = (2*cell_size - 10) / symbol_width
                new_font_size = int(font_size * scaling_factor)
                try:
                    font_symbol = ImageFont.truetype(font_path, new_font_size)
                except IOError:
                    font_symbol = ImageFont.load_default()
                
                # Recalcular posici칩n
                symbol_width = draw.textlength(symbol, font=font_symbol)
                text_x = symbol_area_x0 + (2*cell_size - symbol_width) / 2
                text_y = symbol_area_y0 + (2*cell_size - new_font_size) / 2
            
            # Texto en negrita simulado
            for offset_x in range(-1, 1):
                for offset_y in range(-1, 1):
                    draw.text(
                        (text_x + offset_x, text_y + offset_y),
                        symbol,
                        fill='black',
                        font=font_symbol
                    )
        
        if show_atomic_number:
            # Usar un 치rea de 2x2 celdas para el n칰mero at칩mico en la esquina inferior derecha
            atomic_area_x0 = self.border_size + (grid_size - 2) * cell_size
            atomic_area_y0 = self.border_size + (grid_size - 2) * cell_size
            atomic_area_x1 = atomic_area_x0 + cell_size * 2
            atomic_area_y1 = atomic_area_y0 + cell_size * 2
            
            # Dibujar un fondo blanco para el n칰mero at칩mico sin borde negro
            draw.rectangle(
                [(atomic_area_x0, atomic_area_y0), (atomic_area_x1, atomic_area_y1)],
                fill='white'
            )
            
            atomic_text = str(atomic_number)
            try:
                # Ajustar el tama침o de la fuente seg칰n la longitud del n칰mero
                font_path = "font/OpenSans-Bold.ttf"
                font_size = 80 if len(atomic_text) <= 2 else 65  # Ajustado para que entre mejor
                font_info = ImageFont.truetype(font_path, font_size)
            except IOError:
                try:
                    # Intentar con la ruta alternativa si la primera falla
                    font_path = "/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf"
                    font_info = ImageFont.truetype(font_path, font_size)
                except IOError:
                    font_info = ImageFont.load_default()
            
            # Calcular posici칩n centrada para el texto
            text_width = draw.textlength(atomic_text, font=font_info)
            text_x = atomic_area_x0 + (2*cell_size - text_width) / 2
            text_y = atomic_area_y0 + (2*cell_size - font_size) / 2
            
            # Asegurar que el n칰mero est치 completamente contenido dentro del 치rea 2x2
            # Ajustar tama침o si es necesario
            if text_width > (2*cell_size - 10):
                # Reducir el tama침o de la fuente si es necesario
                scaling_factor = (2*cell_size - 10) / text_width
                new_font_size = int(font_size * scaling_factor)
                try:
                    font_info = ImageFont.truetype(font_path, new_font_size)
                except IOError:
                    font_info = ImageFont.load_default()
                
                # Recalcular posici칩n
                text_width = draw.textlength(atomic_text, font=font_info)
                text_x = atomic_area_x0 + (2*cell_size - text_width) / 2
                text_y = atomic_area_y0 + (2*cell_size - new_font_size) / 2
            
            # Texto en negrita simulado
            for offset_x in range(-1, 1):
                for offset_y in range(-1, 1):
                    draw.text(
                        (text_x + offset_x, text_y + offset_y),
                        atomic_text,
                        fill='black',
                        font=font_info
                    )
        
        marker_array = np.array(img)
        marker_gray = cv2.cvtColor(marker_array, cv2.COLOR_RGB2GRAY)
        
        return marker_gray

    def get_element_by_atomic_number(self, atomic_number):
        """Obtiene un elemento por su n칰mero at칩mico."""
        for element in self.elements:
            if element[2] == atomic_number:
                return element
        return None

def get_image_download_link(img, filename, text):
    """Genera un enlace para descargar una imagen."""
    buffered = io.BytesIO()
    img.save(buffered, format="PNG")
    img_str = base64.b64encode(buffered.getvalue()).decode()
    href = f'<a href="data:file/png;base64,{img_str}" download="{filename}">{text}</a>'
    return href

def main():
    st.title("游빍 Generador de Marcadores RA para la Tabla Peri칩dica")
    
    st.markdown("""
    Esta aplicaci칩n genera marcadores de Realidad Aumentada (RA) 칰nicos para cada elemento 
    de la tabla peri칩dica. Cada marcador se genera utilizando el n칰mero at칩mico del elemento 
    como semilla, lo que garantiza un patr칩n 칰nico y reconocible, optimizado para Vuforia y 
    para impresi칩n 3D.
    """)

    generator = ElementARMarkerGenerator()
    
    st.sidebar.header("Opciones de Configuraci칩n")
    
    # Selector de elemento
    st.sidebar.subheader("Selecciona un Elemento")
    
    # Nueva clasificaci칩n de elementos por categor칤as
    element_categories = {
        " Metales Alcalinos (6 elementos)": [3, 11, 19, 37, 55, 87],
        " Metales Alcalinot칠rreos (6 elementos)": [4, 12, 20, 38, 56, 88],
        " Metales de Transici칩n (34 elementos)": [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 72, 73, 74, 75, 76, 77, 78, 79, 80, 104, 105, 106, 107, 108],
        " Metales Post-Transici칩n (12 elementos)": [13, 31, 49, 50, 81, 82, 83, 84, 113, 114, 115, 116],
        " Metaloides (7 elementos)": [5, 14, 32, 33, 51, 52, 85],
        " No Metales Reactivos (9 elementos)": [1, 6, 7, 8, 9, 15, 16, 17, 34],
        " Gases Nobles (6 elementos)": [2, 10, 18, 36, 54, 86],
        " Lant치nidos (15 elementos)": list(range(57, 72)),
        " Act칤nidos (15 elementos)": list(range(89, 104)),
        " Propiedades Qu칤micas Desconocidas (4 elementos)": [112, 113, 114, 118]
    }
    
    category_select = st.sidebar.selectbox(
        "Categor칤a de elementos",
        options=list(element_categories.keys()),
        index=0
    )
    
    category_elements = element_categories[category_select]
    
    element_options = []
    for atomic_num in category_elements:
        element = generator.get_element_by_atomic_number(atomic_num)
        if element:
            symbol, name, _ = element
            element_options.append(f"{atomic_num}: {name} ({symbol})")
    
    selected_element_str = st.sidebar.selectbox(
        "Elemento",
        options=element_options,
        index=0 if element_options else None
    )
    
    st.sidebar.subheader("O ingresa un n칰mero at칩mico")
    atomic_number_input = st.sidebar.number_input(
        "N칰mero at칩mico (1-118)",
        min_value=1,
        max_value=118,
        value=1
    )
    
    st.sidebar.subheader("Opciones de Visualizaci칩n")
    show_symbol = st.sidebar.checkbox("Mostrar s칤mbolo del elemento", value=True)
    show_atomic_number = st.sidebar.checkbox("Mostrar n칰mero at칩mico", value=True)
    
    # Bot칩n para generar
    generate_button = st.sidebar.button("Generar Marcador")
    
    if generate_button:
        if selected_element_str and ":" in selected_element_str:
            selected_atomic_number = int(selected_element_str.split(':')[0])
        else:
            selected_atomic_number = atomic_number_input
    else:
        selected_atomic_number = atomic_number_input
    
    selected_element = generator.get_element_by_atomic_number(selected_atomic_number)
    
    if selected_element:
        symbol, name, atomic_number = selected_element
        
        col1, col2 = st.columns([2, 1])
        
        with col1:
            st.subheader("Marcador RA generado")
            
            marker = generator.generate_element_marker(
                symbol, 
                name, 
                atomic_number, 
                show_symbol=show_symbol,
                show_atomic_number=show_atomic_number
            )
            
            pil_img = Image.fromarray(marker)
            
            st.image(pil_img, caption=f"Marcador RA para {name}", use_container_width=True)
            
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"{atomic_number:03d}_{symbol}_{timestamp}.png"
            st.markdown(get_image_download_link(pil_img, filename, "游닌 Descargar Marcador"), unsafe_allow_html=True)
        
        with col2:
            st.subheader("Informaci칩n del Elemento")
            
            st.markdown(f"""
            <div class="element-info">
                <h3 style="text-align: center; color: black;">{symbol}</h3>
                <h2 style="text-align: center; color: black;">{name}</h2>
                <p style="text-align: center; color: black;"><strong>N칰mero at칩mico:</strong> {atomic_number}</p>
            </div>
            """, unsafe_allow_html=True)
            
            
            st.markdown("""
            ### Caracter칤sticas del marcador
            
            * Se utiliza el algoritmo Mersenne Twister.
            * Patr칩n de cuadrados para una detecci칩n m치s efectiva
            * Este m칠todo garantiza que se generar치 exactamente el mismo patr칩n.
            * El algoritmo aplica transformaciones matem치ticas, desplazamientos de bits y XOR.
            * Patr칩n 칰nico generado usando el n칰mero at칩mico
            """)
        
        # Instrucciones de uso
        st.markdown("""
        ### C칩mo usar el marcador
        
        1. Descarga la imagen del marcador
        2. Para uso en AR (Vuforia): Imprime la imagen en papel o mu칠strala en pantalla
        3. Para impresi칩n 3D: Importa el archivo a TinkerCAD para a침adir relieve
        4. En la impresi칩n 3D, las 치reas negras ser치n las que tengan relieve
        """)
    
    # Pie de p치gina
    st.sidebar.markdown("---")
    st.sidebar.markdown("### Repositorio")
    st.sidebar.markdown("""
    GitHub: [lcgaibor's apps](https://github.com/lcgaibor/streamlit-apps)
    """)

if __name__ == "__main__":
    main()